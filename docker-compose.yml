# Prod baby
services:
  postgres:
    image: postgres:14
    container_name: soarops-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - ./database/seed.sql:/docker-entrypoint-initdb.d/2-seed.sql
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=soarops
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - soarops-network

  # Yah Flask Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: soarops-backend
    volumes:
      - ./backend:/app
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/soarops
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5000:5000"
    networks:
      - soarops-network

  # Yah React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: soarops-frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - soarops-network

  #  Do ah lor proxy server --- Nginx 
  nginx:
    image: nginx:alpine
    container_name: soarops-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
    networks:
      - soarops-network

volumes:
  postgres_data:

networks:
  soarops-network:
    driver: bridge
